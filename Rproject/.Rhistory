#install packages
install.packages("ISLR")
library(ISLR)
str(Caravan)
summary(Caravan$Purchase)
#checking for NA
any(is.na(Caravan))
library(Amelia)
missmap(Caravan, main= "Caravan", col = c("green","black"), legend = F)
#checking scales between variables (note the scale needs to be standardized because it affects the K nearest neighbour)
var(Caravan[,1])
var(Caravan[,2])
#The dependent variable (purchase) is not standardized
purchase <- Caravan[,86]
#The dependent variable (purchase) is not standardized
purchase <- Caravan[,c("Purchase")]
#standardization
standardized.Caravan <- scale(Caravan[,-86])
#standardization
standardized.Caravan <- scale(Caravan[,-86])
var(standardized.Caravan[,1])
var(standardized.Caravan[,2])
#train and test splitting
test.index <- 1:1000
test.data <- standardized.Caravan[test.index,]
test.purchase <- purchase[test.index]
#train
train.data <- standardized.Caravan[-test.index,]
train.purchase <- purchase[-test.index]
#################
#################
# KNN MODEL
###############
library(class)
predicted.purchase <- knn(train.data,test.data,train.purchase,k=1)
print(head(predicted.purchase))
#evaluate model
missclass.error <- mean(test.purchase != predicted.purchase)
missclass.error
#train and test splitting
test.index <- 1:1000
test.data <- standardized.Caravan[test.index,]
test.purchase <- purchase[test.index]
#train
train.data <- standardized.Caravan[-test.index,]
train.purchase <- purchase[-test.index]
#################
#################
# KNN MODEL
###############
set.seed(101)
library(class)
predicted.purchase <- knn(train.data,test.data,train.purchase,k=1)
print(head(predicted.purchase))
#evaluate model
missclass.error <- mean(test.purchase != predicted.purchase)
missclass.error
########
#choosing the K value
########
predicted.purchase <- NULL
error.rate <- NULL
for (i in 1:20) {
set.seed(101)
predicted.purchase <- knn(train.data,test.data,train.purchase, k=i)
error.rate[i] <- mean(test.purchase != predicted.purchase)
}
print(error.rate)
##visualize K ELBOW METHOD
install.packages("ggplot2")
library(ggplot2)
##visualize K ELBOW METHOD
install.packages('ggplot2', dep = TRUE)
library(ggplot2)
library("gplots", lib.loc="~/R/win-library/3.3")
k.values <- 1:20
error.df <- data.frame(error.rate,k.values)
error.df
#plot
ggplot(error.df, aes(k.values,error.rate)) + geom_point() + geom_line
##visualize K ELBOW METHOD
#install.packages('ggplot2', dep = TRUE)
library(ggplot2)
#plot
ggplot(error.df, aes(k.values,error.rate)) + geom_point() + geom_line
detach("package:gplots", unload=TRUE)
remove.packages("gplots", lib="~/R/win-library/3.3")
##visualize K ELBOW METHOD
install.packages('ggplot2')
library(ggplot2)
library("ggthemes", lib.loc="~/R/win-library/3.3")
library("ggrepel", lib.loc="~/R/win-library/3.3")
library("ggplot2movies", lib.loc="~/R/win-library/3.3")
library("gtable", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2movies", unload=TRUE)
detach("package:ggrepel", unload=TRUE)
detach("package:gtable", unload=TRUE)
detach("package:ggthemes", unload=TRUE)
install.packages("ggplot2")
install.packages("ggplot2", dependencies = FALSE)
#install packages
install.packages("ISLR")
library(ISLR)
str(Caravan)
summary(Caravan$Purchase)
#checking for NA
install.packages("Amelia")
library(Amelia)
missmap(Caravan, main= "Caravan", col = c("green","black"), legend = F)
#checking scales between variables (note the scale needs to be standardized because it affects the K nearest neighbour)
var(Caravan[,1])
var(Caravan[,2])
#The dependent variable (purchase) is not standardized
purchase <- Caravan[,c("Purchase")]
#standardization
standardized.Caravan <- scale(Caravan[,-86])
var(standardized.Caravan[,1])
var(standardized.Caravan[,2])
#train and test splitting
test.index <- 1:1000
test.data <- standardized.Caravan[test.index,]
test.purchase <- purchase[test.index]
#train
train.data <- standardized.Caravan[-test.index,]
train.purchase <- purchase[-test.index]
#################
#################
# KNN MODEL
###############
set.seed(101)
install.packages("class")
library(class)
predicted.purchase <- knn(train.data,test.data,train.purchase,k=1)
print(head(predicted.purchase))
#evaluate model
missclass.error <- mean(test.purchase != predicted.purchase)
missclass.error
########
#choosing the K value
########
predicted.purchase <- NULL
error.rate <- NULL
for (i in 1:20) {
set.seed(101)
predicted.purchase <- knn(train.data,test.data,train.purchase, k=i)
error.rate[i] <- mean(test.purchase != predicted.purchase)
}
print(error.rate)
##visualize K ELBOW METHOD
install.packages('ggplot2')
library(ggplot2)
k.values <- 1:20
error.df <- data.frame(error.rate,k.values)
#plot
ggplot(error.df, aes(k.values,error.rate)) + geom_point() + geom_line
#plot
ggplot(error.df, aes(k.values,error.rate)) + geom_point() + geom_line()
#plot
ggplot(error.df, aes(k.values,error.rate)) + geom_point() + geom_line(lty="dotted",color)
#plot
ggplot(error.df, aes(k.values,error.rate)) + geom_point() + geom_line(lty="dotted",color="red")
library(class)
library(ISLR)
head(iris)
str(iris)
############################EXERCISE
library(ISLR)
library(class)
head(iris)
str(iris)
#checking for variance in feature scale
var(iris[,1])
var(iris[,2])
str(Caravan)
summary(Caravan$Purchase)
#checking for NA
install.packages("Amelia")
any(is.na(Caravan))
#checking scales between variables (note the scale needs to be standardized because it affects the K nearest neighbour)
var(Caravan[,1])
var(Caravan[,2])
#standardizing
stand.features <- scale(iris[1:4])
stand.features
#standardizing
stand.features <- scale(iris[,])
var(stand.features[1:4])
var(stand.features[,1])
var(stand.features[,2])
#standardizing
stand.features <- scale(iris[,-5])
var(stand.features[,1])
var(stand.features[,2])
final.data <- cbind(stand.features,iris[,-1:4])
final.data <- cbind(stand.features,iris[5])
head(final.data)
head(iris)
#TRAIN AND TEST SPLITS
install.packages("caTools")
library(caTools)
set.seed(101)
sample <- sample.split(final.data$Species, SplitRatio = 0.7)
sample <- sample.split(final.data$Species, SplitRatio = 0.7)
train <- subset(final.data, sample==T)
test <- subset(final.data, sample==F)
#model
predict.species <- knn(train[1:4],test[1:4],train$Species,k=1)
predict.species
miss.class <- mean(test$Species != predict.species)
miss.class
set.seed(101)
sample <- sample.split(final.data$Species, SplitRatio = 0.7)
train <- subset(final.data, sample==T)
test <- subset(final.data, sample==F)
predict.species <- knn(train[1:4],test[1:4],train$Species,k=1)
miss.class <- mean(test$Species != predict.species)
miss.class
###### choosing a K value
predict.species <- NULL
error.rate <- NULL
for (i in 1:10) {
set.seed(101)
predict.species <- knn(train[1:4],test[1:4],train$Species, k=i)
error.rate[i] <- mean(test$Species != predict.species)
}
library(ggplot2)
error.rate[i]
k.values <- 1:10
error.df <- data.frame(error.rate,k.values)
error.df
pl <- ggplot(error.df,aes(x=k.values,y=error.rate)) + geom_point()
pl + geom_line(lty="dotted",color='red')
install.packages("rpart")
library(rpart)
str(kyphosis)
head(kyphosis)
tree <- rpart(kyphosis~.,method = "class", data = kyphosis)
tree <- rpart(Kyphosis~.,method = "class", data = kyphosis)
printcp(tree)
plot(tree, uniform = T, main = "Kyphosis Tree")
text(tree, use.n = T, all = T)
install.packages("rpart.plot")
library(rpart.plot)
prp(tree)
install.packages("ranomForest")
install.packages("randomForest")
library(randomForest)
rf.model <- randomForest(Kyphosis~., data = kyphosis)
rf.model
rf.model$ntree
rf.model$confusion
library(ez)
uninstall.packages("ez")
remove.packages("ez")
remove.packages("ez", lib = T)
remove.packages("car", lib = T)
#install.packages("pcaMethods" )
install.packages("ez")
library(ez)
library(ISLR)
head(iris)
install.packages("e1071")
library(e1071)
model <- svm(Species ~., data = iris)
summary(model)
tune.results <- tune(svm, train.x = iris[1:4],train.y = iris[,5], kernel="radial", ranges = list(cost=c(0.1,1,10), gamma=c(0.5,1,2)))
summary(tune.results)
tune.results <- tune(svm, train.x = iris[1:4],train.y = iris[,5], kernel="radial", ranges = list(cost=c(0.5,1,1.5), gamma=c(0.1,0.5,0.7)))
summary(tune.results)
tuned.svm <- svm(Species ~., data = iris, kernel = "radial", cost=1.5, gamma=0.1)
summary(tuned.svm)
setwd("C:/Users/Kalechi Amatobi/Desktop/untargeted analysis")
install.packages("xcms")
install.packages("faahko")
install.packages("RColorBrewer")
install.packages("pander")
install.packages("magrittr")
install.packages("pheatmap")
install.packages("installr", dependencies = FALSE)
library("installr", lib.loc="~/R/win-library/3.5")
updateR()
updateR()
install.packages(c("caTools", "corrgram", "corrplot", "dplyr", "ggplot2", "ggthemes"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
#installing packages
install.packages("xcms")
#selecting package repositories
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
Germany
UK
32
UK
Germany (Göttingen)
library(xcms)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
library(xcms)
detach("package:xcms", unload = TRUE)
#installing packages
library(xcms)
UK
Germany (Göttingen) [https]
32
0-Cloud [https]
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
1
